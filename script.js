document.addEventListener('DOMContentLoaded', () => {
	// Kh·ªüi t·∫°o ResponsiveVoice
	if (typeof responsiveVoice !== 'undefined') {
		responsiveVoice.init();
	}

	let lessons = [];
	let currentQuizVocab = [];
	let currentCardIndex = 0;
	const backToTop = document.getElementById('backToTop');

	// Show/hide back to top button
	window.onscroll = function () {
		if (
			document.body.scrollTop > 500 ||
			document.documentElement.scrollTop > 500
		) {
			backToTop.classList.add('visible');
		} else {
			backToTop.classList.remove('visible');
		}
	};

	// Scroll to top when button is clicked
	backToTop.addEventListener('click', () => {
		window.scrollTo({
			top: 0,
			behavior: 'smooth',
		});
	});
	let userProgress = JSON.parse(localStorage.getItem('userProgress')) || {
		currentLesson: 0,
		completedLessons: [],
		quizScores: {},
	};

	// Fetch lessons data from JSON file
	fetch('jlpt_n5_lessons_full.json')
		.then((response) => response.json())
		.then((data) => {
			lessons = data;
			displayLessonList(lessons);
		})
		.catch((error) => console.error('Error loading lessons:', error));

	function displayLessonList(lessons) {
		const lessonList = document.getElementById('lessonList');
		lessonList.innerHTML = '';
		lessons.forEach((lesson, index) => {
			const lessonItem = document.createElement('div');
			lessonItem.className = 'lesson-item';
			if (index > userProgress.currentLesson) {
				lessonItem.classList.add('locked');
			}

			// Add lock icon for locked lessons
			const lockStatus = index <= userProgress.currentLesson ? '' : 'üîí ';
			lessonItem.textContent = lockStatus + lesson.title;

			if (index <= userProgress.currentLesson) {
				lessonItem.addEventListener('click', () => {
					document
						.querySelectorAll('.lesson-item')
						.forEach((item) => {
							item.classList.remove('active');
						});
					lessonItem.classList.add('active');
					displayLessonContent(lesson, index);
				});
			}
			lessonList.appendChild(lessonItem);
		});
	}
	function displayLessonContent(lesson, lessonIndex) {
		const contentDiv = document.getElementById('lessonContent');
		const isCompleted = userProgress.completedLessons.includes(lessonIndex);
		const quizScore = userProgress.quizScores[lessonIndex] || 0;

		// Scroll to content on mobile
		if (window.innerWidth <= 1024) {
			contentDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
		}

		contentDiv.innerHTML = `
            <h2>${lesson.title}</h2>
            ${
				isCompleted
					? '<div class="completion-badge">‚úÖ ƒê√£ ho√†n th√†nh</div>'
					: ''
			}
            ${
				quizScore > 0
					? `<div class="score-display">ƒêi·ªÉm b√†i ki·ªÉm tra: ${quizScore}%</div>`
					: ''
			}

            <div class="vocab-list">
                <h3>T·ª´ v·ª±ng</h3>                ${lesson.vocabulary
					.map(
						(vocab) => `
                    <div class="vocab-item">
                        <div class="vocab-content">
                            <strong>${vocab.word}</strong> - ${vocab.meaning}
                        </div>                        <button class="vocab-speak-btn" onclick="speakJapanese('${vocab.word}')">
                            <i class="fa-solid fa-volume-high"></i>
                        </button>
                    </div>
                `
					)
					.join('')}
                <button class="start-quiz-btn" onclick="startFlashcards(${lessonIndex})">√în t·∫≠p t·ª´ v·ª±ng</button>
                ${
					!isCompleted
						? `<button class="take-test-btn" onclick="startTest(${lessonIndex})">Ki·ªÉm tra b√†i h·ªçc</button>`
						: ''
				}
            </div>

            <div class="grammar-list">
                <h3>Ng·ªØ ph√°p</h3>
                ${lesson.grammar
					.map(
						(gram) => `
                    <div class="grammar-item">
                        <strong>C·∫•u tr√∫c:</strong> ${gram.structure}<br>
                        <strong>√ù nghƒ©a:</strong> ${gram.meaning}
                        <div class="example">
                            <div><strong>V√≠ d·ª•:</strong></div>
                            <div>${gram.example.japanese}</div>
                            <div>${gram.example.hiragana}</div>
                            <div>${gram.example.vietnamese}</div>
                        </div>
                    </div>
                `
					)
					.join('')}
            </div>
        `;
	}

	// Flashcards functionality
	window.startFlashcards = function (lessonIndex) {
		currentQuizVocab = lessons[lessonIndex].vocabulary;
		currentCardIndex = 0;
		updateCard();
		document.getElementById('quizModal').style.display = 'flex';
	};

	// Test functionality
	window.startTest = function (lessonIndex) {
		const lesson = lessons[lessonIndex];
		const questions = generateQuestions(lesson);
		displayTest(questions, lessonIndex);
	};

	function generateQuestions(lesson) {
		let questions = [];

		// Vocabulary questions
		lesson.vocabulary.forEach((vocab) => {
			questions.push({
				type: 'vocab',
				question: `√ù nghƒ©a c·ªßa t·ª´ "${vocab.word}" l√† g√¨?`,
				correctAnswer: vocab.meaning,
				options: [
					vocab.meaning,
					...getRandomVocabOptions(
						lesson.vocabulary,
						vocab.meaning,
						3
					),
				].sort(() => Math.random() - 0.5),
			});
		});

		// Grammar questions
		lesson.grammar.forEach((gram) => {
			questions.push({
				type: 'grammar',
				question: `C·∫•u tr√∫c "${gram.structure}" c√≥ √Ω nghƒ©a g√¨?`,
				correctAnswer: gram.meaning,
				options: [
					gram.meaning,
					...getRandomGrammarOptions(lessons, gram.meaning, 3),
				].sort(() => Math.random() - 0.5),
			});
		});

		return questions.sort(() => Math.random() - 0.5).slice(0, 10);
	}

	function getRandomVocabOptions(vocabulary, correct, count) {
		const options = vocabulary
			.map((v) => v.meaning)
			.filter((meaning) => meaning !== correct);
		return shuffle(options).slice(0, count);
	}

	function getRandomGrammarOptions(allLessons, correct, count) {
		const options = allLessons
			.flatMap((lesson) => lesson.grammar.map((g) => g.meaning))
			.filter((meaning) => meaning !== correct);
		return shuffle(options).slice(0, count);
	}

	function shuffle(array) {
		return array.sort(() => Math.random() - 0.5);
	}

	function displayTest(questions, lessonIndex) {
		const modal = document.createElement('div');
		modal.className = 'test-modal';
		modal.innerHTML = `
            <div class="test-content">
                <h3>Ki·ªÉm tra - ${lessons[lessonIndex].title}</h3>
                <form id="testForm">
                    ${questions
						.map(
							(q, i) => `
                        <div class="question">
                            <p>${i + 1}. ${q.question}</p>
                            ${q.options
								.map(
									(option) => `
                                <label>
                                    <input type="radio" name="q${i}" value="${option}">
                                    ${option}
                                </label>
                            `
								)
								.join('')}
                        </div>
                    `
						)
						.join('')}
                    <button type="submit" class="submit-test">N·ªôp b√†i</button>
                </form>
            </div>
        `;

		document.body.appendChild(modal);

		document.getElementById('testForm').addEventListener('submit', (e) => {
			e.preventDefault();
			const score = calculateScore(questions);
			if (score >= 50) {
				userProgress.completedLessons.push(lessonIndex);
				if (lessonIndex === userProgress.currentLesson) {
					userProgress.currentLesson++;
				}
				userProgress.quizScores[lessonIndex] = score;
				localStorage.setItem(
					'userProgress',
					JSON.stringify(userProgress)
				);
				displayLessonList(lessons);
			}
			showTestResult(score, lessonIndex);
			modal.remove();
		});
	}

	function calculateScore(questions) {
		let correct = 0;
		questions.forEach((q, i) => {
			const answer = document.querySelector(
				`input[name="q${i}"]:checked`
			)?.value;
			if (answer === q.correctAnswer) correct++;
		});
		return Math.round((correct / questions.length) * 100);
	}

	function showTestResult(score, lessonIndex) {
		const resultModal = document.createElement('div');
		resultModal.className = 'result-modal';
		resultModal.innerHTML = `
            <div class="result-content">
                <h3>K·∫øt qu·∫£ ki·ªÉm tra</h3>
                <p>ƒêi·ªÉm s·ªë c·ªßa b·∫°n: ${score}%</p>
                ${
					score >= 50
						? '<p class="success">üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t y√™u c·∫ßu ƒë·ªÉ m·ªü kh√≥a b√†i ti·∫øp theo!</p>'
						: '<p class="failure">‚ùå B·∫°n c·∫ßn ƒë·∫°t tr√™n 50% ƒë·ªÉ m·ªü kh√≥a b√†i ti·∫øp theo. H√£y √¥n t·∫≠p v√† th·ª≠ l·∫°i!</p>'
				}
                <button onclick="this.parentElement.parentElement.remove()">ƒê√≥ng</button>
            </div>
        `;
		document.body.appendChild(resultModal);
	}

	// Close quiz modal
	document.querySelector('.close-quiz').addEventListener('click', () => {
		document.getElementById('quizModal').style.display = 'none';
	});

	// Flip card
	document.getElementById('flipCard').addEventListener('click', () => {
		document.querySelector('.flashcard').classList.toggle('flipped');
	});

	// Next card
	document.getElementById('nextCard').addEventListener('click', () => {
		if (currentCardIndex < currentQuizVocab.length - 1) {
			currentCardIndex++;
			updateCard();
		}
	});

	// Previous card
	document.getElementById('prevCard').addEventListener('click', () => {
		if (currentCardIndex > 0) {
			currentCardIndex--;
			updateCard();
		}
	});
	const UNSPLASH_ACCESS_KEY = 'qnGQNTI93hS0mbWtlkz_UbAAF6pZUKW6atKOOhUaphg';

	async function getImageForWord(word) {
		try {
			// T√¨m ki·∫øm ·∫£nh d·ª±a tr√™n t·ª´ ti·∫øng Anh
			const englishWord = await translateToEnglish(word);
			const response = await fetch(
				`https://api.unsplash.com/search/photos?query=${englishWord}&per_page=1`,
				{
					headers: {
						Authorization: `Client-ID ${UNSPLASH_ACCESS_KEY}`,
					},
				}
			);
			const data = await response.json();

			if (data.results && data.results.length > 0) {
				return data.results[0].urls.small;
			}
			return null;
		} catch (error) {
			console.error('Error fetching image:', error);
			return null;
		}
	}
	// H√†m d·ªãch t·ª´ ti·∫øng Nh·∫≠t sang ti·∫øng Anh s·ª≠ d·ª•ng cache, t·ª´ ƒëi·ªÉn n·ªôi b·ªô v√† MyMemory API
	async function translateToEnglish(japaneseWord) {
		try {
			// Ki·ªÉm tra cache tr∆∞·ªõc
			const cachedTranslation = localStorage.getItem(
				`translation_${japaneseWord}`
			);
			if (cachedTranslation) {
				return JSON.parse(cachedTranslation);
			}

			// T·ª´ ƒëi·ªÉn n·ªôi b·ªô JLPT N5 (m·ªü r·ªông)
			const dictionary = {
				„Çè„Åü„Åó: 'i',
				„ÅÇ„Å™„Åü: 'you',
				„Åã„Çå: 'he',
				„Åã„ÅÆ„Åò„Çá: 'she',
				„Çè„Åü„Åó„Åü„Å°: 'we',
				„Åø„Çì„Å™: 'everyone',
				„Å™„Å´: 'what',
				„Å©„Åì: 'where',
				„ÅÑ„Å§: 'when',
				„Å©„ÅÜ„Åó„Å¶: 'why',
				„ÅÑ„Å¨: 'dog',
				„Å≠„Åì: 'cat',
				„Åè„Çã„Åæ: 'car',
				„Åò„Å¶„Çì„Åó„ÇÉ: 'bicycle',
				„Åß„Çì„Åó„ÇÉ: 'train',
				„Å≤„Åì„ÅÜ„Åç: 'airplane',
				„Åø„Åö: 'water',
				„Åî„ÅØ„Çì: 'rice / meal',
				„Åü„Åπ„Çã: 'eat',
				„ÅÆ„ÇÄ: 'drink',
				„ÅØ„Å™„Åô: 'speak',
				„Åç„Åè: 'listen / ask',
				„Åø„Çã: 'see',
				„ÅÑ„Åè: 'go',
				„Åè„Çã: 'come',
				„Åô„Çã: 'do',
				„ÅÇ„Çã: 'exist (inanimate)',
				„ÅÑ„Çã: 'exist (animate)',
				„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô: 'good morning',
				„Åì„Çì„Å´„Å°„ÅØ: 'hello',
				„Åì„Çì„Å∞„Çì„ÅØ: 'good evening',
				„Åï„Çà„ÅÜ„Å™„Çâ: 'goodbye',
				„ÅÇ„Çä„Åå„Å®„ÅÜ: 'thank you',
				„Åô„Åø„Åæ„Åõ„Çì: 'excuse me / sorry',
				„ÅØ„ÅÑ: 'yes',
				„ÅÑ„ÅÑ„Åà: 'no',
				„ÅÑ„Å°: 'one',
				„Å´: 'two',
				„Åï„Çì: 'three',
				„Çà„Çì: 'four',
				„Åî: 'five',
				„Çç„Åè: 'six',
				„Å™„Å™: 'seven',
				„ÅØ„Å°: 'eight',
				„Åç„ÇÖ„ÅÜ: 'nine',
				„Åò„ÇÖ„ÅÜ: 'ten',
				„Åü„Åã„ÅÑ: 'expensive / tall',
				„ÇÑ„Åô„ÅÑ: 'cheap / inexpensive',
				„Åä„Åä„Åç„ÅÑ: 'big',
				„Å°„ÅÑ„Åï„ÅÑ: 'small',
				„ÅÇ„Åü„Çâ„Åó„ÅÑ: 'new',
				„Åµ„Çã„ÅÑ: 'old',
				„ÅÑ„ÅÑ: 'good',
				„Çè„Çã„ÅÑ: 'bad',
				„Åü„ÅÆ„Åó„ÅÑ: 'fun',
				„Åï„Å≥„Åó„ÅÑ: 'lonely',
				„ÅÜ„Çå„Åó„ÅÑ: 'happy',
				„Åã„Å™„Åó„ÅÑ: 'sad',
				„Åõ„Çì„Åõ„ÅÑ: 'teacher',
				„Åå„Åè„Åõ„ÅÑ: 'student',
				„Åå„Å£„Åì„ÅÜ: 'school',
				„Å®„ÇÇ„Å†„Å°: 'friend',
				„ÅÑ„Åà: 'house',
				„Å∏„ÇÑ: 'room',
				„Åß„Çì„Çè: 'telephone',
				„Åò„Åó„Çá: 'dictionary',
				„Åª„Çì: 'book',
				„Åà„Çì„Å¥„Å§: 'pencil',
				„Åã„Å∞„Çì: 'bag',
				„Ç∑„É£„ÉÑ: 'shirt',
				„Ç∫„Éú„É≥: 'pants',
				„Åè„Å§: 'shoes',
				„Å®„Åë„ÅÑ: 'watch / clock',
				„Å®„Åó„Çá„Åã„Çì: 'library',
				„Åé„Çì„Åì„ÅÜ: 'bank',
				„Å≥„Çá„ÅÜ„ÅÑ„Çì: 'hospital',
				„Çπ„Éº„Éë„Éº: 'supermarket',
				„É¨„Çπ„Éà„É©„É≥: 'restaurant',
				„ÅÑ„Åæ: 'now',
				„Åç„Çá„ÅÜ: 'today',
				„ÅÇ„Åó„Åü: 'tomorrow',
				„Åç„ÅÆ„ÅÜ: 'yesterday',
				„Åæ„ÅÑ„Å´„Å°: 'every day',
				„Åó„ÇÖ„ÅÜ„Åæ„Å§: 'weekend',
				„Å≤„Çã: 'noon',
				„Çà„Çã: 'night',
				„ÅÇ„Åï: 'morning',
				„Å®„Åç„Å©„Åç: 'sometimes',
				„ÅÑ„Å§„ÇÇ: 'always',
				„Åú„Çì„Åú„Çì: 'never',
				„Åô„Åì„Åó: 'a little',
				„Åü„Åè„Åï„Çì: 'a lot',
				„ÅÑ„Å£„Åó„Çá„Å´: 'together',
				„Å≤„Å®„Çä„Åß: 'alone',
			};

			// N·∫øu t·ª´ c√≥ trong t·ª´ ƒëi·ªÉn, tr·∫£ v·ªÅ t·ª´ ƒë√≥
			if (dictionary[japaneseWord]) {
				localStorage.setItem(
					`translation_${japaneseWord}`,
					JSON.stringify(dictionary[japaneseWord])
				);
				return dictionary[japaneseWord];
			}

			// N·∫øu kh√¥ng c√≥, d√πng API
			const response = await fetch(
				`https://api.mymemory.translated.net/get?q=${encodeURIComponent(
					japaneseWord
				)}&langpair=ja|en`
			);
			const data = await response.json();

			if (data.responseData?.translatedText) {
				const translation =
					data.responseData.translatedText.toLowerCase();
				localStorage.setItem(
					`translation_${japaneseWord}`,
					JSON.stringify(translation)
				);
				return translation;
			}

			// Fallback n·∫øu kh√¥ng d·ªãch ƒë∆∞·ª£c
			return japaneseWord;
		} catch (error) {
			console.error('Translation error:', error);
			return japaneseWord;
		}
	}

	function updateCard() {
		const vocab = currentQuizVocab[currentCardIndex];
		const wordElement = document.querySelector('.flashcard-front .word');
		const meaningElement = document.querySelector(
			'.flashcard-back .meaning'
		);
		const illustrationElement = document.querySelector(
			'.illustration-image'
		);

		wordElement.textContent = vocab.word;
		meaningElement.textContent = vocab.meaning;

		// L·∫•y v√† hi·ªÉn th·ªã h√¨nh ·∫£nh
		getImageForWord(vocab.word).then((imageUrl) => {
			if (imageUrl) {
				illustrationElement.style.backgroundImage = `url(${imageUrl})`;
				illustrationElement.style.display = 'block';
			} else {
				illustrationElement.style.display = 'none';
			}
		});

		document.querySelector('.flashcard').classList.remove('flipped');
		document.querySelector('.speak-btn').onclick = () =>
			speakJapanese(vocab.word);
	}

	// X·ª≠ l√Ω ph√°t √¢m
	let isSpeaking = false;

	async function playWord(text, rate = 0.7) {
		return new Promise((resolve, reject) => {
			if (isSpeaking) {
				responsiveVoice.cancel();
			}

			isSpeaking = true;
			responsiveVoice.speak(text, 'Japanese Female', {
				rate: rate,
				pitch: 1.0,
				volume: 1.0,
				onend: () => {
					isSpeaking = false;
					resolve();
				},
				onerror: (e) => {
					isSpeaking = false;
					reject(e);
				},
			});
		});
	}

	// Ph√°t √¢m ti·∫øng Nh·∫≠t
	window.speakJapanese = async function (word) {
		try {
			await playWord(word);
		} catch (error) {
			console.error('L·ªói ph√°t √¢m:', error);
		}
	};

	// Close modal when clicking outside
	window.onclick = function (event) {
		const modal = document.getElementById('quizModal');
		if (event.target === modal) {
			modal.style.display = 'none';
		}
	};

	// Welcome modal logic
	const welcomeModal = document.getElementById('welcomeModal');
	const startLearningBtn = document.getElementById('startLearningBtn');

	if (!localStorage.getItem('jlptN5WelcomeShown')) {
		welcomeModal.style.display = 'flex';
		// T·ª± ƒë·ªông ·∫©n sau 3s
		setTimeout(() => {
			welcomeModal.style.display = 'none';
			localStorage.setItem('jlptN5WelcomeShown', 'yes');
		}, 3000);
	} else {
		welcomeModal.style.display = 'none';
	}

	startLearningBtn.addEventListener('click', () => {
		welcomeModal.style.display = 'none';
		localStorage.setItem('jlptN5WelcomeShown', 'yes');
	});
});
